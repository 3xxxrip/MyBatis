<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
<!--    引入外部properties文件,此时就可以通过el表达式来获取文件中的键值-->
    <properties resource="jdbc.properties"/>

<!--    The content of element type "configuration" must match "-->
<!--    (properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,-->
<!--    objectWrapperFactory?,reflectorFactory?,plugins?,environments?,-->
<!--    databaseIdProvider?,mappers?)"
        配置的xml文件中标签顺序必须和上面一致-->

<!--    设置类型别名-->
<!--    这个为了在UserMapper中方便写查询返回类型设置的,类型别名不区分大小写，后面的alias可不写，不写就是默认类的名称，也就是User，不区分大小写-->
    <typeAliases>
<!--        <typeAlias type="com.myBatis.pojo.User" alias="User"/>-->

        <!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写，常用-->
        <package name="com.myBatis.pojo"/>
    </typeAliases>


    <!--设置连接数据库的环境-->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>


    <!--引入映射文件-->
    <mappers>
<!--        <mapper resource="mappers/UserMapper.xml"/>-->

        <!--
            以包为单位，将包下所有的映射文件引入核心配置文件
            要求
                1.mapper接口所在的包要和映射文件所在的包一致
                2.mapper接口要和映射的文件名字一致

                另外在resources里面不能直接创建包，所以要以com/myBatis/mapper为名字来创建目录，才能造出和package一样的效果，意思就是要/分隔
            注意：此方式必须保证mapper接口和mapper映射文件必须在相同的包下
        -->
        <package name="com.myBatis.mapper"/>
    </mappers>
</configuration>